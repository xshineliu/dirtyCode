/*
 * ipsetSim.c
 *
 *  Created on: Apr 23, 2018
 *      Author: shine
 */

#include <stdio.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>
#include <string.h>

#define N 65536
uint16_t counter[N];
uint64_t *bitmap = NULL;

uint8_t default_rsskey_40bytes[40] = { 0x6d, 0x5a, 0x56, 0xda, 0x25, 0x5b, 0x0e,
		0xc2, 0x41, 0x67, 0x25, 0x3d, 0x43, 0xa3, 0x8f, 0xb0, 0xd0, 0xca, 0x2b,
		0xcb, 0xae, 0x7b, 0x30, 0xb4, 0x77, 0xcb, 0x2d, 0xa3, 0x80, 0x30, 0xf2,
		0x0c, 0x6a, 0x42, 0xb7, 0x3b, 0xbe, 0xac, 0x01, 0xfa };

uint32_t toeplitz_hash(unsigned keylen, const uint8_t *key, unsigned datalen,
		const uint8_t *data) {
	uint32_t hash = 0, v;
	uint32_t i, b;

	/* XXXRW: Perhaps an assertion about key length vs. data length? */

	v = (key[0] << 24) + (key[1] << 16) + (key[2] << 8) + key[3];
	for (i = 0; i < datalen; i++) {
		for (b = 0; b < 8; b++) {
			if (data[i] & (1 << (7 - b)))
				hash ^= v;
			v <<= 1;
			if ((i + 4) < keylen && (key[i + 4] & (1 << (7 - b))))
				v |= 1;
		}
	}
	return (hash);
}




/* allocate bitmap, input size in bytes */
uint8_t *allocBitmap(size_t size, int doClean) {
	uint8_t * ptr = NULL;
	ptr = (uint8_t *)malloc(size);
	if(ptr == NULL) {
		fprintf(stderr, "Malloc for Bitmap with size %lu failed.\n", size);
		return NULL;
	}
	/* touch pages */
	if(doClean) {
		memset((void *)ptr, 0, size);
	}
	return ptr;
}

/* set the bit for the pos-th bit
 * op = -1 for query
 * op = 0 clear
 * op = 1 set
 */
uint8_t bitmapOps(uint8_t *ptr, uint64_t pos, int8_t op) {
	uint64_t offset = 0;
	uint8_t bitVal = 0;

	/* offset in byte unit */
	offset = (pos >> 3);
#ifdef DEBUG
	printf(" D_bitmapOps %016llX %016llX %d\n", pos, offset, op);
#endif
	/* 3 bits for in-data bit offset in 1 byte */
	if(op > 0) {
		bitVal = 0x1UL << (pos & 0x07);
		ptr[offset] |= bitVal;
	} else if(op == 0) {
		bitVal = ~(0x1UL << (pos & 0x07));
		ptr[offset] &= bitVal;
	} else {
		bitVal = 0x1UL << (pos & 0x07);
		bitVal &= ptr[offset];
	}
	return bitVal;
}

/* set the bit for the pos-th bit
 *  149.154.168.0/22
 *  pos =  149.154.168.0
 *  bits = (32 - 22) = 10
 *  op, 0 for clear and 1 for set
 */
void bitmapOpsBatch(uint8_t *ptr, uint64_t pos, uint8_t bits, uint8_t op) {
	uint64_t offset = 0;
	uint8_t bitVal = 0;
	// 2^32 most for IPv4
	uint64_t nr = (0x1 << bits);

	if(bits > 32) {
		// valid from 0 to 32
		return;
	}

	/* offset in byte unit */
	offset = (pos >> 3);
	if(nr == 1) {
		/* 3 bits for in-data bit offset in 1 byte */
		if(op) {
			bitVal = 0x1UL << (pos & 0x07);
			ptr[offset] |= bitVal;
		} else {
			bitVal = ~(0x1UL << (pos & 0x07));
			ptr[offset] &= bitVal;
		}
		return;
	}
	if(nr == 2) {

		if(op) {
			bitVal = 0x1UL << (pos & 0x07);
			bitVal |= (0x1UL << (pos & 0x07 + 1));
			ptr[offset] |= bitVal;
		} else {
			bitVal = ~(0x1UL << (pos & 0x07));
			bitVal &= ~(0x1UL << (pos & 0x07 + 1));
			ptr[offset] &= bitVal;
		}

		return;
	}
	if(nr == 4) {

		if(op) {
			bitVal = 0x1UL << (pos & 0x07);
			bitVal |= (0x1UL << (pos & 0x07 + 1));
			bitVal |= (0x1UL << (pos & 0x07 + 2));
			bitVal |= (0x1UL << (pos & 0x07 + 3));
			ptr[offset] |= bitVal;
		} else {
			bitVal = ~(0x1UL << (pos & 0x07));
			bitVal &= ~(0x1UL << (pos & 0x07 + 1));
			bitVal &= ~(0x1UL << (pos & 0x07 + 2));
			bitVal &= ~(0x1UL << (pos & 0x07 + 3));
			ptr[offset] &= bitVal;
		}
		return;
	}
	//printf(" + %d\n", nr/8);
	if(op) {
		memset((void *)(ptr + offset), 0xFF, nr / 8);
	} else {
		memset((void *)(ptr + offset), 0x0, nr / 8);
	}
}



/* free memory */
void destroyBitmap(uint8_t *ptr) {
	free(ptr);
}



/* return 1 when found, 0 on else */
int hitIPSet(const char* IPs, uint8_t *bitmap) {
	int ret;
	uint32_t host;
	struct in_addr s;
	char *slash = NULL;

	slash = strchr(IPs, '/');
	if(slash) {
		fprintf(stderr, "WARN %s does not support IP section %s\n", __func__, IPs);
		*slash = '\0';
		slash++;
	}

	ret = inet_pton(AF_INET, IPs, (void *)(&s));
	if(ret != 1) {
		/* IP invalid */
		return -1;
	}
	host = htonl(s.s_addr);
	if(bitmapOps(bitmap, (uint64_t)host, -1)) {
		ret = 1;
	} else {
		ret = 0;
	}

	// restore
	if(slash) {
		*(slash - 1) = '/';
	}

	return ret;
}


/* IPs: accept single IP and IP patter with "/" */

int addIPstoBitmap(const char* IPs, uint8_t *map){

	int ret, len, i = 0;
	uint32_t host;
	struct in_addr s;
	char *slash = NULL;
	uint8_t maskBits = 0;

	slash = strchr(IPs, '/');
	if(slash) {
		// contains an area
		*slash = '\0';
		slash++;

		ret = inet_pton(AF_INET, IPs, (void *)(&s));
		if(ret != 1) {
			fprintf(stderr, "Error IPs found %s\n", IPs);
			return -1;
		}
		host = htonl(s.s_addr);

		maskBits = (uint8_t) atoi(slash);
		//printf("* GET_M %s %X %s %d %d\n", IPs, host, slash, len, maskBits);
		bitmapOpsBatch(map, host, 32 - maskBits, 1);
#ifdef DEBUG
		printf("V %08X %08X %d\n", host, bitmapOps(map, (uint64_t)host, -1),
				hitIPSet(IPs, map));
#endif
		// restore
		*(slash - 1) = '/';
		return 0;
	}


	ret = inet_pton(AF_INET, IPs, (void *)(&s));
	if(ret != 1) {
		printf("%s\n", IPs);
		return -1;
	}
	host = htonl(s.s_addr);

	bitmapOps(map, (uint64_t)host, 1);

#ifdef DEBUG
	printf("GET_S %X, %s\n", host, IPs);
	printf("%s %08X %08X %d\n", __func__, host, bitmapOps(map, (uint64_t)host, -1),
			hitIPSet(IPs, map));
#endif
#ifdef DEBUG_TEST
	bitmapOps(map, (uint64_t)host, 0);
	printf("%s %08X %08X %d\n", __func__, host, bitmapOps(map, (uint64_t)host, -1),
			hitIPSet(IPs, map));
#endif


	return 0;
}







int parseIP(){
	FILE *fp = NULL;
	char buf[INET_ADDRSTRLEN];
	struct in_addr s;
	uint32_t host = 0;
	unsigned long long cnt = 0;
	int ret = 0 ;
	int len = 0;
	unsigned int offset = 0;
	uint64_t bitVal = 0;

	fp = fopen("/Users/shine/oversea.txt", "r");

	if(!fp) {
		return -ENOENT;
	}

	while(fgets(buf, INET_ADDRSTRLEN, fp)) {
		len = strlen(buf);
		buf[len - 1] = '\0';
		ret = inet_pton(AF_INET, buf, (void *)(&s));
		host = htonl(s.s_addr);
		//printf("%lld, ret %d, %08X, %08X, %s\n", ++cnt, ret, s.s_addr, host, buf);
		ret = toeplitz_hash(sizeof(default_rsskey_40bytes), default_rsskey_40bytes,
				sizeof(host), (const uint8_t *) &host);
		//printf("%08X\n", ret);
		counter[(ret & 0xFFFF)] += 1;
		offset = (((unsigned int)ret >> 3) >> 3);
		bitVal = (0x01LLU << (((unsigned int)ret & 0x03F)));
		printf("%08X %08X %02u %016llX\n", ret, offset,
				(unsigned int)ret & 0x03F, bitVal);
		bitmap[offset] |= bitVal;
	}
	fclose(fp);

	return 0;
}



int searchIP(){
	FILE *fp = NULL;
	char buf[INET_ADDRSTRLEN];
	struct in_addr s;
	uint32_t host = 0;
	unsigned long long cnt = 0;
	int ret = 0 ;
	int len = 0;
	unsigned int offset = 0;
	uint64_t bitVal = 0;

	fp = fopen("/Users/shine/oversea.txt", "r");

	if(!fp) {
		return -ENOENT;
	}

	while(fgets(buf, INET_ADDRSTRLEN, fp)) {
		len = strlen(buf);
		buf[len - 1] = '\0';
		ret = inet_pton(AF_INET, buf, (void *)(&s));
		host = htonl(s.s_addr);
		//printf("%lld, ret %d, %08X, %08X, %s\n", ++cnt, ret, s.s_addr, host, buf);
		ret = toeplitz_hash(sizeof(default_rsskey_40bytes), default_rsskey_40bytes,
				sizeof(host), (const uint8_t *) &host);
		//printf("%08X\n", ret);
		counter[(ret & 0xFFFF)] += 1;
		offset = (((unsigned int)ret >> 3) >> 3);
		bitVal = (0x01LLU << (((unsigned int)ret & 0x03F)));
		printf("%08X %08X %02u %016llX %016llX\n", ret, offset,
				(unsigned int)ret & 0x03F, bitVal, bitmap[offset] & bitVal);
	}
	fclose(fp);

	return 0;
}


int testBitmapAPI() {

	FILE *fp = NULL;
	uint8_t *map = NULL;
	int ret, len= 0;
	char buf[INET_ADDRSTRLEN + 3];

	map = allocBitmap((1LLU << 29), 1);
	if(!map) {
		// error
	}

	fp = fopen("/Users/shine/oversea.txt", "r");
	if(!fp) {
		return -ENOENT;
	}
	while(fgets(buf, INET_ADDRSTRLEN + 3, fp)) {
		len = strlen(buf);
		if(len < 7) {
			continue;
		}
		buf[len - 1] = '\0';

		addIPstoBitmap(buf, map);
//#ifdef DEBUG
#if 1
		printf("%s %s %d\n", __func__, buf, hitIPSet(buf, map));
#endif
	}
	fclose(fp);

	destroyBitmap(map);
	return 0;

}

int main(int argc, char* argv[]) {

	int i = 0;
	bitmap = malloc(1LLU << (32 - 3));
	if(bitmap == NULL) {
		fprintf(stderr, "Can't get memory.\n");
		return 1;
	} else {
		fprintf(stderr, "Get bitmap %p %llX %llx.\n", bitmap,
				bitmap[(1LLU << (32 - 6)) - 1], (1LLU << (32 - 6)) - 1);
	}
	for(i = 0; i < (1LLU << (32 - 6)); i++) {
		bitmap[i] = 0LLU;
	}
	//parseIP();
	//searchIP();
	testBitmapAPI();

}
